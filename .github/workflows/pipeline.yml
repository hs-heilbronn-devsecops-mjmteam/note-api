name: Pipeline

#Trigger workflow on pull requests to all branches and push to the main branch
on:
  pull_request:
    branches:
      - main
      - '**'
  push:
    branches:
      - main

jobs:
  #Job for testing and code coverage report
  test:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      actions: read
      security-events: write
      id-token: write

    #Sepcify trigger conditions to react to (in case of additional triggers are added to workflow)
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:

      - run: |
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"

      - name: Checkout code
        uses: actions/checkout@v4
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          #Caching packages dependencies
          cache: 'pip'
          cache-dependency-path: '**/requirements*.txt'
      - run: echo "Python has been set up."

      - name: Authenticate to Google Cloud (with workload identity federation)
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token' #to generate OAuth2.0 token
          workload_identity_provider: 'projects/70756149774/locations/global/workloadIdentityPools/github-actions/providers/github-repos' #'${{secrets.WORKLOAD_IDENTITY_PROVIDER}}'
          service_account: 'hshn-devsecops-service-account@hs-heilbronn-devsecops.iam.gserviceaccount.com' #'${{secrets.SERVICE_ACCOUNT}}'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt && pip install -r requirements-dev.txt
      - run: echo "Dependencies have been installed."

      - name: Run tests with pytest
        #Using all available CPU-cores with -n auto
        #Measure code coverage during the test with --cov
        #Generate coverage report
        run: pytest -n auto --cov=note_api tests/ --cov-report=xml
      
      - name: Upload results to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - run: echo "Uploaded coverage report to Codecov"

      - run: echo "Pytest has been executed. Job status is ${{ job.status }}."

  #Job for detecting and monitoring security vulnerabilities
  security:

    #Set permissions for uploading SARIF files to the organizations Code scanning
    permissions:
      actions: read
      contents: read
      security-events: write

    runs-on: ubuntu-latest

    #Speficify trigger conditions to only react to push (not to pull_request)
    if: github.event_name == 'push'
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."

      - name: Checkout code
        uses: actions/checkout@v4
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."


      # Snyk automatically runs pip install -r requirements.txt with commands: test and monitoring
      # The requirements-dev.txt was not specified as an argument, because these dependencies will not be used in production.
      

      # Immediate, one-time scan for vulnerabilities during developement.
      # Test also used for generating a SARIF file
      - name: Run Snyk test for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --sarif-file-output=snyk.sarif
      - run: echo "Security scan executed. SARIF file generated"

      #Make security vulnerabilities visible in GitHub
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
      - run: echo "SARIF file uploaded to GitHub Code Scanning"

      #Continuous monitoring for vulnerabilities for ongoing security management.
      - name: Run Snyk to monitor project
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
      - run: echo "Snapshot sent to SNYK for continuous monitoring"

  #Job for building and pushing a docker image to the Github code registry
  docker:
    runs-on: ubuntu-latest
    #Set permissions for uploading the image to the organzations code registry
    permissions:
      contents: read        # Required for accessing the repository contents
      packages: write       # Allows writing to GitHub Container Registry
    needs:
      - test
      - security
    if: always() && needs.test.result == 'success' && (github.ref_name != 'main' || needs.security.result == 'success')
    steps:
      - name: check result
        run: |
          echo "Condition evaluation: ${{ needs.test.result == 'success' && (github.ref_name != 'main' || needs.security.result == 'success') }}"
          echo "Test result: ${{ needs.test.result }}"
          echo "Is branch not 'main'?: ${{ github.ref_name }}"
          echo "Is test security success?: ${{ needs.security.result }}"
      - run: |
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
      
      #Comment in to generate multiple images (specified by parameter 'platform') with QEMU and Buildx

      #- name: Set up QEMU
      #  uses: docker/setup-qemu-action@v3
      #- run: echo "QEMU setup completed"

      #- name: Set up Docker Buildx
      #  uses: docker/setup-buildx-action@v3
      #- run: echo "Docker Buildx setup completed"

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}  # GitHub-Username (added automatically)
          password: ${{ secrets.GITHUB_TOKEN }}  # GitHub Token for authentication
      - run: echo "Logged in to GitHub Container Registry"

      # Action uses the Git context, therefore actions/checkout is not needed
      - name: Build and push to GitHub Container Registry
        uses: docker/build-push-action@v6
        with:
          #Only needed to generate multiple images for different plattforms
          #platforms: linux/amd64, linux/arm64
          provenance: false #Provenance information not needed
          push: true
          tags: ghcr.io/${{ github.repository }}/note-api:${{ github.sha }}  #Tag image with hash value of triggered branch
      - run: echo "Build and push completed to GitHub Container Registry"
  
  cloud_deploy:
    runs-on: ubuntu-latest
    needs: [docker]
    permissions:  # Korrekte Berechtigungen f√ºr den Job
      contents: read
      id-token: write
      packages: read
    if: github.ref_name == 'main'
    steps:

      - name: Log repository details
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"

      - name: Authenticate to Google Cloud (with workload identity federation)
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token' #to generate OAuth2.0 token
          workload_identity_provider: 'projects/70756149774/locations/global/workloadIdentityPools/github-actions/providers/github-repos' #'${{secrets.WORKLOAD_IDENTITY_PROVIDER}}'
          service_account: 'hshn-devsecops-service-account@hs-heilbronn-devsecops.iam.gserviceaccount.com' #'${{secrets.SERVICE_ACCOUNT}}'

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}  # GitHub-Username (added automatically)
          password: ${{ secrets.GITHUB_TOKEN }}  # GitHub Token for authentication

      - name: Log in to Google Cloud Artifact Registry
        uses: docker/login-action@v3
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}' # reuse access token from google cloud auth
          registry: europe-west3-docker.pkg.dev 

      # pull latest main docker image and push to GAR
      - name: Push Docker image to Google Artifact Registry
        run: |
          docker pull ghcr.io/hs-heilbronn-devsecops-mjmteam/note-api/note-api:${{ github.sha }}
          docker tag ghcr.io/hs-heilbronn-devsecops-mjmteam/note-api/note-api:${{ github.sha }} europe-west3-docker.pkg.dev/hs-heilbronn-devsecops/note-api/note-api:${{ github.sha }}
          docker push europe-west3-docker.pkg.dev/hs-heilbronn-devsecops/note-api/note-api:${{ github.sha }}

      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: hs-heilbronn-devsecops-mjmteam #displayed name of service
          image: europe-west3-docker.pkg.dev/hs-heilbronn-devsecops/note-api/note-api:${{ github.sha }}
          region: europe-west3 #Frankfurt 
          env_vars: BACKEND=memory
